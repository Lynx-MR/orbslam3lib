# /**
#  * @file orbslam_dsp_cos_sin_lut_gen.py
#  *
#  * @author Gaston Rouquette (Lynx Mixed Reality)
#  *
#  * @brief Python code to generate look up table header for sin/cos values access
# **/


#Python code to generate the encoded angles look up table 

import math
import numpy as np

def get_angle(encoded_angle):
    if(encoded_angle == 0):
        return 0.0
    

    x_bits = (encoded_angle & 0b0011110000) // 16
    y_bits = encoded_angle & 0b0000001111


    tan_angle = 0.0
    angle = 0.0
    if(x_bits != 0):
        tan_angle = float(y_bits) / float(x_bits)
        angle = np.arctan(tan_angle)
    else:
        angle = np.pi/2
    
    x_sign = (encoded_angle & 0b1000000000) >> 9
    y_sign = (encoded_angle & 0b0100000000) >> 8

    if(x_sign == 1):
        angle = np.pi - angle
    
    if(y_sign == 1):
        angle = -angle
    
    #return angle
    return angle - np.pi # Adjust the angle to start from 0

print(np.rad2deg(get_angle(0b1011000110)))

# Parameters
n_angles = 1024  # Number of entries in the LUT
max_value = 64  # Maximum precision we need (2^5 may be enough for 31 diameter disc)
filename = "orbslam_rb_cos_sin_lut.h"  # Output header file name
value_type = "int8_t"  # Data type of the LUT values

# Generate angles between 0 and 2PI (n_angles values)
angles = [get_angle(i) for i in range(n_angles)]

# Create the tables for sine and cosine values
lut_cos = []
lut_sin = []
for angle in angles:
    if(angle == 0.0):
        cos_val = max_value
        sin_val = 0
        lut_cos.append(cos_val)
        lut_sin.append(sin_val)
        continue

    # Calculate the cosine and sine values
    cos_val = int(math.cos(angle) * max_value)
    sin_val = int(math.sin(angle) * max_value)
    lut_cos.append(cos_val)
    lut_sin.append(sin_val)

# Write the header file
with open(filename, 'w') as file:
    file.write("/* This file is automatically generated by a Python script. Do not modify manually. */\n\n")
    
    file.write("#ifndef LUT_SIN_COS_H\n")
    file.write("#define LUT_SIN_COS_H\n\n")
    file.write('#include "hvx_internal.h"\n\n')

    file.write('#pragma GCC diagnostic ignored "-Wc++11-narrowing"\n\n')
    file.write('#pragma GCC diagnostic ignored "-Wunused-variable"\n\n')
    
    # Cosine table
    file.write("static const "+ value_type +" lut_cos[%d] = {\n    " % n_angles)
    for i, cos_val in enumerate(lut_cos):
        file.write(f"{cos_val}, " if i < n_angles - 1 else f"{cos_val}, ")
        if(i%16 == 15):
            file.write("\n    ")
    file.write("};\n\n")
    
    # Sine table
    file.write("static const "+ value_type +" lut_sin[%d] = {\n    " % n_angles)
    for i, sin_val in enumerate(lut_sin):
        file.write(f"{sin_val}, " if i < n_angles - 1 else f"{sin_val}, ")
        if(i%16 == 15):
            file.write("\n    ")
    file.write("};\n\n")
    
    file.write("#endif // LUT_SIN_COS_H\n")

print(f"Lookup tables generated in {filename}")